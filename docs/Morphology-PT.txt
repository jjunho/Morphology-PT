-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Morphology of the Portuguese language
--   
--   Please see the README on GitHub at
--   <a>https://github.com/jjunho/Morphology-PT#readme</a>
@package Morphology-PT
@version 0.1.0.0

module NLP.Morphology.PT.Nominal.Irreg

module NLP.Morphology.PT.Nominal.Reg

module NLP.Morphology.Txt
tshow :: Show a => a -> Text
tread :: Read a => Text -> a
putTxt :: Txt a => a -> IO ()
putTxtLn :: Txt a => a -> IO ()
class Txt a
txt :: Txt a => a -> Text
instance NLP.Morphology.Txt.Txt Data.Text.Internal.Text

module NLP.Morphology.PT.Common
type Citation = Text
data Gender
MSC :: Gender
FEM :: Gender
data Number
SG :: Number
PL :: Number
data GenderNumber
MS :: GenderNumber
MP :: GenderNumber
FS :: GenderNumber
FP :: GenderNumber
data Person
P1 :: Person
P2 :: Person
P3 :: Person
P4 :: Person
P5 :: Person
P6 :: Person
data Root
Root :: RootType -> Text -> Root
[rootType] :: Root -> RootType
[root] :: Root -> Text
data RootType
Reg :: RootType
Cmp :: RootType
Irr :: RootType
CQU :: RootType
QUC :: RootType
GGU :: RootType
GUG :: RootType
CÇ :: RootType
ÇC :: RootType
GJ :: RootType
data Affix
Prefix :: Text -> Affix
Suffix :: Text -> Affix
data ThematicVowel
A' :: ThematicVowel
E' :: ThematicVowel
I' :: ThematicVowel
O' :: ThematicVowel
U' :: ThematicVowel
Z' :: ThematicVowel
toTV :: Text -> ThematicVowel
toGN :: (Gender, Number) -> GenderNumber
fromGN :: GenderNumber -> (Gender, Number)
fromP6 :: Person -> (Person, Number)
toP6 :: (Person, Number) -> Person
class Deep a
deep :: Deep a => a -> [Text]
deepTxt :: Deep a => a -> Text
class Shallow a
shallow :: Shallow a => a -> [Text]
shallowTxt :: Shallow a => a -> Text
class Orth a
orth :: Orth a => a -> Text
range :: (Bounded a, Enum a) => [a]
getRoot :: Citation -> Text
(<$$>) :: (Functor f1, Functor f2) => (a -> b) -> f1 (f2 a) -> f1 (f2 b)
instance GHC.Enum.Bounded NLP.Morphology.PT.Common.ThematicVowel
instance GHC.Enum.Enum NLP.Morphology.PT.Common.ThematicVowel
instance GHC.Classes.Eq NLP.Morphology.PT.Common.ThematicVowel
instance GHC.Show.Show NLP.Morphology.PT.Common.ThematicVowel
instance GHC.Classes.Eq NLP.Morphology.PT.Common.Affix
instance GHC.Show.Show NLP.Morphology.PT.Common.Affix
instance GHC.Classes.Eq NLP.Morphology.PT.Common.Root
instance GHC.Show.Show NLP.Morphology.PT.Common.Root
instance GHC.Classes.Eq NLP.Morphology.PT.Common.RootType
instance GHC.Show.Show NLP.Morphology.PT.Common.RootType
instance GHC.Enum.Bounded NLP.Morphology.PT.Common.Person
instance GHC.Enum.Enum NLP.Morphology.PT.Common.Person
instance GHC.Classes.Eq NLP.Morphology.PT.Common.Person
instance GHC.Show.Show NLP.Morphology.PT.Common.Person
instance GHC.Enum.Bounded NLP.Morphology.PT.Common.GenderNumber
instance GHC.Enum.Enum NLP.Morphology.PT.Common.GenderNumber
instance GHC.Classes.Eq NLP.Morphology.PT.Common.GenderNumber
instance GHC.Show.Show NLP.Morphology.PT.Common.GenderNumber
instance GHC.Enum.Bounded NLP.Morphology.PT.Common.Number
instance GHC.Enum.Enum NLP.Morphology.PT.Common.Number
instance GHC.Classes.Eq NLP.Morphology.PT.Common.Number
instance GHC.Show.Show NLP.Morphology.PT.Common.Number
instance GHC.Enum.Bounded NLP.Morphology.PT.Common.Gender
instance GHC.Enum.Enum NLP.Morphology.PT.Common.Gender
instance GHC.Classes.Eq NLP.Morphology.PT.Common.Gender
instance GHC.Show.Show NLP.Morphology.PT.Common.Gender
instance NLP.Morphology.Txt.Txt NLP.Morphology.PT.Common.ThematicVowel
instance NLP.Morphology.Txt.Txt NLP.Morphology.PT.Common.Root
instance NLP.Morphology.Txt.Txt NLP.Morphology.PT.Common.Person
instance NLP.Morphology.Txt.Txt NLP.Morphology.PT.Common.Number
instance NLP.Morphology.Txt.Txt NLP.Morphology.PT.Common.Gender

module NLP.Morphology.PT.Verb.Base
data Impersonal
INF :: Impersonal
GER :: Impersonal
data Personal
IPRS :: Personal
IPRF :: Personal
IIPF :: Personal
IPPF :: Personal
IFUT :: Personal
IFPR :: Personal
SPRS :: Personal
SIPF :: Personal
SFUT :: Personal
IMPA :: Personal
IMPN :: Personal
INFP :: Personal
data NominalVerb
PPP :: NominalVerb
data GenderNumber
MS :: GenderNumber
FS :: GenderNumber
MP :: GenderNumber
FP :: GenderNumber
data Morpheme
A :: Morpheme
E :: Morpheme
I :: Morpheme
O :: Morpheme
U :: Morpheme
S :: Morpheme
MOS :: Morpheme
IS :: Morpheme
M :: Morpheme
STE :: Morpheme
STES :: Morpheme
DES :: Morpheme
RA :: Morpheme
RE :: Morpheme
VA :: Morpheme
VE :: Morpheme
SE :: Morpheme
R :: Morpheme
NDO :: Morpheme
D :: Morpheme
Z :: Morpheme
C :: Morpheme
LV :: Morpheme
MRoot :: Text -> Morpheme
L :: Text -> Morpheme
getThematicVowel :: Citation -> ThematicVowel
mkRoot :: Citation -> Root
orthRoot :: Root -> Text
class Morph a
morph :: Morph a => a -> Morpheme
allom :: Morph a => a -> Morpheme
zerom :: Morph a => a -> Morpheme
doRoot :: Root -> Text
iprfm :: Person -> Morpheme
bounds :: (Enum a, Bounded a) => [a]
data VStructure
Pers :: Citation -> Root -> ThematicVowel -> Personal -> Person -> VStructure
Impr :: Citation -> Root -> ThematicVowel -> Impersonal -> VStructure
Nom :: Citation -> Root -> ThematicVowel -> NominalVerb -> Gender -> Number -> VStructure
Comp :: Citation -> VStructure -> VStructure -> VStructure
instance GHC.Classes.Eq NLP.Morphology.PT.Verb.Base.VStructure
instance GHC.Show.Show NLP.Morphology.PT.Verb.Base.VStructure
instance GHC.Classes.Eq NLP.Morphology.PT.Verb.Base.Morpheme
instance GHC.Read.Read NLP.Morphology.PT.Verb.Base.Morpheme
instance GHC.Show.Show NLP.Morphology.PT.Verb.Base.Morpheme
instance GHC.Enum.Bounded NLP.Morphology.PT.Verb.Base.GenderNumber
instance GHC.Enum.Enum NLP.Morphology.PT.Verb.Base.GenderNumber
instance GHC.Classes.Eq NLP.Morphology.PT.Verb.Base.GenderNumber
instance GHC.Show.Show NLP.Morphology.PT.Verb.Base.GenderNumber
instance GHC.Enum.Bounded NLP.Morphology.PT.Verb.Base.NominalVerb
instance GHC.Enum.Enum NLP.Morphology.PT.Verb.Base.NominalVerb
instance GHC.Classes.Eq NLP.Morphology.PT.Verb.Base.NominalVerb
instance GHC.Show.Show NLP.Morphology.PT.Verb.Base.NominalVerb
instance GHC.Enum.Bounded NLP.Morphology.PT.Verb.Base.Personal
instance GHC.Enum.Enum NLP.Morphology.PT.Verb.Base.Personal
instance GHC.Classes.Eq NLP.Morphology.PT.Verb.Base.Personal
instance GHC.Show.Show NLP.Morphology.PT.Verb.Base.Personal
instance GHC.Enum.Bounded NLP.Morphology.PT.Verb.Base.Impersonal
instance GHC.Enum.Enum NLP.Morphology.PT.Verb.Base.Impersonal
instance GHC.Classes.Eq NLP.Morphology.PT.Verb.Base.Impersonal
instance GHC.Show.Show NLP.Morphology.PT.Verb.Base.Impersonal
instance NLP.Morphology.Txt.Txt NLP.Morphology.PT.Verb.Base.VStructure
instance NLP.Morphology.PT.Verb.Base.Morph NLP.Morphology.PT.Common.Root
instance NLP.Morphology.PT.Verb.Base.Morph NLP.Morphology.PT.Common.ThematicVowel
instance NLP.Morphology.PT.Verb.Base.Morph NLP.Morphology.PT.Verb.Base.Personal
instance NLP.Morphology.PT.Verb.Base.Morph NLP.Morphology.PT.Verb.Base.Impersonal
instance NLP.Morphology.PT.Verb.Base.Morph NLP.Morphology.PT.Verb.Base.NominalVerb
instance NLP.Morphology.PT.Verb.Base.Morph NLP.Morphology.PT.Common.Person
instance NLP.Morphology.PT.Verb.Base.Morph NLP.Morphology.PT.Common.Gender
instance NLP.Morphology.PT.Verb.Base.Morph NLP.Morphology.PT.Common.Number
instance NLP.Morphology.Txt.Txt NLP.Morphology.PT.Verb.Base.Morpheme
instance NLP.Morphology.Txt.Txt [NLP.Morphology.PT.Verb.Base.Morpheme]
instance NLP.Morphology.Txt.Txt [[NLP.Morphology.PT.Verb.Base.Morpheme]]
instance NLP.Morphology.Txt.Txt [[[NLP.Morphology.PT.Verb.Base.Morpheme]]]

module NLP.Morphology.PT.Verb.Irregular
shallowI :: VStructure -> VStructure
toCompI :: VStructure -> VStructure

module NLP.Morphology.PT.Verb.Regular
toCompR :: VStructure -> VStructure
toComp :: VStructure -> VStructure
deepR :: VStructure -> [Morpheme]
shallowR :: VStructure -> [Morpheme]
shallowR' :: VStructure -> [Morpheme]
minusS :: [Morpheme] -> [Morpheme]
orth :: VStructure -> Text
orthR :: VStructure -> Text
minus0 :: [Morpheme] -> [Morpheme]
acute :: Morpheme -> Morpheme
circ :: Morpheme -> Morpheme
root0 :: VStructure -> VStructure

module NLP.Morphology.PT.Verb
mkParadigm :: Text -> [[VStructure]]
getTense :: GetTense a => [[VStructure]] -> a -> [VStructure]
mkVerb :: VStructure -> Verb
personal :: Citation -> Personal -> Person -> VStructure
impersonal :: Citation -> Impersonal -> VStructure
participle :: Citation -> NominalVerb -> Gender -> Number -> VStructure
data Personal
IPRS :: Personal
IPRF :: Personal
IIPF :: Personal
IPPF :: Personal
IFUT :: Personal
IFPR :: Personal
SPRS :: Personal
SIPF :: Personal
SFUT :: Personal
IMPA :: Personal
IMPN :: Personal
INFP :: Personal
data Impersonal
INF :: Impersonal
GER :: Impersonal
data NominalVerb
PPP :: NominalVerb
instance GHC.Classes.Eq NLP.Morphology.PT.Verb.Verb
instance GHC.Show.Show NLP.Morphology.PT.Verb.Verb
instance NLP.Morphology.Txt.Txt NLP.Morphology.PT.Verb.Verb
instance NLP.Morphology.Txt.Txt [NLP.Morphology.PT.Verb.Verb]
instance NLP.Morphology.Txt.Txt [[NLP.Morphology.PT.Verb.Verb]]
instance NLP.Morphology.PT.Verb.GetTense NLP.Morphology.PT.Verb.Base.Personal
instance NLP.Morphology.PT.Verb.GetTense NLP.Morphology.PT.Verb.Base.Impersonal
instance NLP.Morphology.PT.Verb.GetTense NLP.Morphology.PT.Verb.Base.NominalVerb

module NLP.Morphology.PT.Nominal.Base
data NStructure
Nom :: Root -> ThematicVowel -> Gender -> Number -> NStructure
[root] :: NStructure -> Root
[thematicVowel] :: NStructure -> ThematicVowel
[gender] :: NStructure -> Gender
[number] :: NStructure -> Number
Pro :: Root -> ThematicVowel -> Person -> Gender -> Number -> NStructure
[root] :: NStructure -> Root
[thematicVowel] :: NStructure -> ThematicVowel
[person] :: NStructure -> Person
[gender] :: NStructure -> Gender
[number] :: NStructure -> Number
Det :: Root -> ThematicVowel -> Gender -> Number -> NStructure
[root] :: NStructure -> Root
[thematicVowel] :: NStructure -> ThematicVowel
[gender] :: NStructure -> Gender
[number] :: NStructure -> Number

module NLP.Morphology.PT.Nominal
noun :: () => a
adjective :: () => a
pronoun :: () => a
determiner :: () => a


-- | Haddock documentation: <a>https://jjunho.github.io/Morphology-PT</a>
--   
--   If you are using only Portuguese:
--   
--   <pre>
--   import qualified Data.Text         (Text)
--   import qualified Data.Text         as T
--   import qualified Data.Text.IO      as TIO
--   import           NLP.Morphology.PT
--   </pre>
--   
--   After the implementation of other languages and if you are using
--   multiple languages at a time:
--   
--   <pre>
--   import qualified Data.Text         (Text)
--   import qualified Data.Text         as T
--   import qualified Data.Text.IO      as TIO
--   import qualified NLP.Morphology.PT as PT
--   import qualified NLP.Morphology.KR as KR
--   import qualified NLP.Morphology.JA as JA
--   </pre>
--   
--   Don't forget to set <tt>OverloadedStrings</tt> and/or use the
--   <tt>LANGUAGE</tt> pragma:
--   
--   <pre>
--   :set -XOverloadedStrings
--   </pre>
module NLP.Morphology.PT
data Personal
IPRS :: Personal
IPRF :: Personal
IIPF :: Personal
IPPF :: Personal
IFUT :: Personal
IFPR :: Personal
SPRS :: Personal
SIPF :: Personal
SFUT :: Personal
IMPA :: Personal
IMPN :: Personal
INFP :: Personal
data Impersonal
INF :: Impersonal
GER :: Impersonal
data NominalVerb
PPP :: NominalVerb
data Person
P1 :: Person
P2 :: Person
P3 :: Person
P4 :: Person
P5 :: Person
P6 :: Person
data Gender
MSC :: Gender
FEM :: Gender
data Number
SG :: Number
PL :: Number
mkParadigm :: Text -> [[VStructure]]
getTense :: GetTense a => [[VStructure]] -> a -> [VStructure]
noun :: () => a
adjective :: () => a
pronoun :: () => a
determiner :: () => a
deep :: Deep a => a -> [Text]
deepTxt :: Deep a => a -> Text
shallow :: Shallow a => a -> [Text]
shallowTxt :: Shallow a => a -> Text
orth :: Orth a => a -> Text
txt :: Txt a => a -> Text
putTxt :: Txt a => a -> IO ()
putTxtLn :: Txt a => a -> IO ()
putParadigm :: Text -> IO ()
